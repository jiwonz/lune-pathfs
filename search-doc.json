{"searchDocs":[{"title":"Path","type":0,"sectionRef":"#","url":"/lune-pathfs/api/Path","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Path","url":"/lune-pathfs/api/Path#types","content":" ","version":null,"tagName":"h2"},{"title":"AsPath​","type":1,"pageTitle":"Path","url":"/lune-pathfs/api/Path#AsPath","content":"&lt;/&gt; type AsPath = string | Path | Components A type that can be used as a path-like value. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Path","url":"/lune-pathfs/api/Path#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Path","url":"/lune-pathfs/api/Path#new","content":"&lt;/&gt; Path.new( path: string-- The path string ) → Path-- A new Path instance Creates a new Path instance.  ","version":null,"tagName":"h3"},{"title":"from​","type":1,"pageTitle":"Path","url":"/lune-pathfs/api/Path#from","content":"&lt;/&gt; Path.from( path: AsPath-- The path-like value ) → Path-- A new Path instance Creates a new Path instance from a path-like value.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"Path","url":"/lune-pathfs/api/Path#is","content":"&lt;/&gt; Path.is( value: unknown-- The value to check ) → boolean-- Whether the value is a Path instance Checks if a value is a Path instance. ","version":null,"tagName":"h3"},{"title":"DirectoryPath","type":0,"sectionRef":"#","url":"/lune-pathfs/api/DirectoryPath","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#properties","content":" ","version":null,"tagName":"h2"},{"title":"path​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#path","content":"&lt;/&gt; DirectoryPath.path: Path The underlying Path instance. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#functions","content":" ","version":null,"tagName":"h2"},{"title":"__tostring​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#__tostring","content":"&lt;/&gt; DirectoryPath.__tostring( self: DirectoryPath-- The DirectoryPath instance ) → string-- A string representation of the DirectoryPath instance Returns a string representation of the DirectoryPath instance. Example local dirPath = DirectoryPath.fromExisting(&quot;path/to/dir&quot;) print(dirPath) -- Output: DirectoryPath&lt;path/to/dir&gt;   ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#new","content":"&lt;/&gt; DirectoryPath.new( dirPath: AsPath-- The directory path ) → DirectoryPath-- A new DirectoryPath instance Creates a new DirectoryPath instance.  ","version":null,"tagName":"h3"},{"title":"fromExisting​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#fromExisting","content":"&lt;/&gt; DirectoryPath.fromExisting( dirPath: AsPath-- The directory path ) → DirectoryPath-- A new DirectoryPath instance Creates a new DirectoryPath instance from an existing directory. An error will be thrown if the directory does not exist.  ","version":null,"tagName":"h3"},{"title":"withDirWritten​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#withDirWritten","content":"&lt;/&gt; DirectoryPath.withDirWritten( self: DirectoryPath,-- The DirectoryPath instance allowOverwrite: boolean?-- Whether to allow overwriting an existing directory. Defaults to false. ) → DirectoryPath-- The DirectoryPath instance Writes the directory to the filesystem if it does not already exist. An error will be thrown in the following situations: A file already exists at the directory path. The current process lacks permissions to write the directory. Some other I/O error occurred. Example local dirPath = DirectoryPath.new(&quot;path/to/dir&quot;):withDirWritten()   ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#is","content":"&lt;/&gt; DirectoryPath.is( value: any-- The value to check ) → boolean-- Whether the value is a DirectoryPath instance Checks if a value is a DirectoryPath instance.  ","version":null,"tagName":"h3"},{"title":"isDir​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#isDir","content":"must_use &lt;/&gt; DirectoryPath.isDir( self: DirectoryPath-- The DirectoryPath instance ) → boolean-- Whether the directory exists Checks if the directory exists. An error will be thrown in the following situations: The current process lacks permissions to read at the directory path. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"readDir​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#readDir","content":"must_use &lt;/&gt; DirectoryPath.readDir( self: DirectoryPath-- The DirectoryPath instance ) → {string}-- A table containing the entries in the directory Reads the contents of the directory. An error will be thrown in the following situations: The directory does not exist. The current process lacks permissions to read at the directory path. Some other I/O error occurred. Example local dirPath = DirectoryPath.fromExisting(&quot;path/to/dir&quot;) for _, name in dirPath:readDir() do print(name) end   ","version":null,"tagName":"h3"},{"title":"writeDir​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#writeDir","content":"&lt;/&gt; DirectoryPath.writeDir( self: DirectoryPath-- The DirectoryPath instance ) → () Writes the directory to the filesystem. An error will be thrown in the following situations: A file already exists at the directory path. The current process lacks permissions to write the directory. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"removeDir​","type":1,"pageTitle":"DirectoryPath","url":"/lune-pathfs/api/DirectoryPath#removeDir","content":"&lt;/&gt; DirectoryPath.removeDir( self: DirectoryPath-- The DirectoryPath instance ) → () Removes the directory from the filesystem. An error will be thrown in the following situations: The directory does not exist. The current process lacks permissions to remove the directory. Some other I/O error occurred. ","version":null,"tagName":"h3"},{"title":"FilePath","type":0,"sectionRef":"#","url":"/lune-pathfs/api/FilePath","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#properties","content":" ","version":null,"tagName":"h2"},{"title":"path​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#path","content":"&lt;/&gt; FilePath.path: Path The underlying Path instance. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#functions","content":" ","version":null,"tagName":"h2"},{"title":"__tostring​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#__tostring","content":"&lt;/&gt; FilePath.__tostring( self: FilePath-- The FilePath instance ) → string-- A string representation of the FilePath instance Returns a string representation of the FilePath instance. Example local filePath = FilePath.fromExisting(&quot;path/to/file&quot;) print(filePath) -- Output: FilePath&lt;path/to/file&gt;   ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#new","content":"&lt;/&gt; FilePath.new( filePath: AsPath-- The file path ) → FilePath-- A new FilePath instance Creates a new FilePath instance.  ","version":null,"tagName":"h3"},{"title":"fromExisting​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#fromExisting","content":"&lt;/&gt; FilePath.fromExisting( filePath: AsPath-- The existing file path ) → FilePath-- A new FilePath instance Creates a new FilePath instance from an existing file path. An error will be thrown if there is no file at the given path.  ","version":null,"tagName":"h3"},{"title":"withFileWritten​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#withFileWritten","content":"&lt;/&gt; FilePath.withFileWritten( self: FilePath,-- The FilePath instance contents: Contents,-- The contents to write to the file allowOverwrite: boolean?-- Whether to allow overwriting an existing file. Defaults to false. ) → FilePath-- The FilePath instance Writes the file to the filesystem. An error will be thrown in the following situations: The current process lacks permissions to write the file. Some other I/O error occurred. Example local filePath = FilePath.new(&quot;path/to/file&quot;):withFileWritten(&quot;content&quot;)   ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#is","content":"&lt;/&gt; FilePath.is( value: any-- The value to check ) → boolean-- Whether the value is a FilePath instance Checks if a value is a FilePath instance.  ","version":null,"tagName":"h3"},{"title":"isFile​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#isFile","content":"must_use &lt;/&gt; FilePath.isFile( self: FilePath-- The FilePath instance ) → boolean-- Whether the file exists at the path Checks if the file exists at the path.  ","version":null,"tagName":"h3"},{"title":"readFile​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#readFile","content":"must_use &lt;/&gt; FilePath.readFile( self: FilePath-- The FilePath instance ) → string-- The file contents Reads the file contents. An error will be thrown in the following situations: The current process lacks permissions to read the file. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"writeFile​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#writeFile","content":"&lt;/&gt; FilePath.writeFile( self: FilePath,-- The FilePath instance contents: Contents-- The contents to write to the file ) → () Writes contents to the file. An error will be thrown in the following situations: The current process lacks permissions to write the file. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"removeFile​","type":1,"pageTitle":"FilePath","url":"/lune-pathfs/api/FilePath#removeFile","content":"&lt;/&gt; FilePath.removeFile( self: FilePath-- The FilePath instance ) → () Removes the file. An error will be thrown in the following situations: The file does not exist. The current process lacks permissions to remove the file. Some other I/O error occurred. ","version":null,"tagName":"h3"},{"title":"fs","type":0,"sectionRef":"#","url":"/lune-pathfs/api/fs","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#functions","content":" ","version":null,"tagName":"h2"},{"title":"copy​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#copy","content":"&lt;/&gt; fs.copy( from: typeof(AsPathType:type()),-- The path to copy from to: typeof(AsPathType:type()),-- The path to copy to overwriteOrOptions: typeof(overwriteOrOptionsType:type())-- Options for the target path, such as if should be overwritten if it already exists ) → () Copies a file or directory recursively to a new path. Throws an error if a file or directory already exists at the target path. This can be bypassed by passing true as the third argument, or a dictionary of options. Refer to the documentation for WriteOptions for specific option keys and their values. An error will be thrown in the following situations: The current process lacks permissions to read at from or write at to. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"isDir​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#isDir","content":"must_use &lt;/&gt; fs.isDir( dirPath: typeof(AsPathType:type())-- The directory path to check ) → boolean-- If the path is a directory or not Checks if a given path is a directory. An error will be thrown in the following situations: The current process lacks permissions to read at path. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"isFile​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#isFile","content":"must_use &lt;/&gt; fs.isFile( filePath: typeof(AsPathType:type())-- The file path to check ) → boolean-- If the path is a file or not Checks if a given path is a file. An error will be thrown in the following situations: The current process lacks permissions to read at path. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"metadata​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#metadata","content":"must_use &lt;/&gt; fs.metadata( path: typeof(AsPathType:type())-- The path to get metadata for ) → Metadata-- Metadata for the path Gets metadata for the given path. An error will be thrown in the following situations: The current process lacks permissions to read at path. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"move​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#move","content":"&lt;/&gt; fs.move( from: typeof(AsPathType:type()),-- The path to move from to: typeof(AsPathType:type()),-- The path to move to overwriteOrOptions: typeof(overwriteOrOptionsType:type())-- Options for the target path, such as if should be overwritten if it already exists ) → () Moves a file or directory to a new path. Throws an error if a file or directory already exists at the target path. This can be bypassed by passing true as the third argument, or a dictionary of options. Refer to the documentation for WriteOptions for specific option keys and their values. An error will be thrown in the following situations: The current process lacks permissions to read at from or write at to. The new path exists on a different mount point. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"readDir​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#readDir","content":"must_use &lt;/&gt; fs.readDir( dirPath: typeof(AsPathType:type())-- The directory path to search in ) → {string}-- A list of files &amp; directories found Reads entries in a directory at path. An error will be thrown in the following situations: path does not point to an existing directory. The current process lacks permissions to read the contents of the directory. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"readFile​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#readFile","content":"must_use &lt;/&gt; fs.readFile( filePath: typeof(AsPathType:type())-- The path to the file to read ) → string-- The contents of the file Reads a file at path. An error will be thrown in the following situations: path does not point to an existing file. The current process lacks permissions to read the file. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"removeDir​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#removeDir","content":"&lt;/&gt; fs.removeDir( path: typeof(AsPathType:type())-- The directory to remove ) → () Removes a directory and all of its contents. An error will be thrown in the following situations: path is not an existing and empty directory. The current process lacks permissions to remove the directory. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"removeFile​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#removeFile","content":"&lt;/&gt; fs.removeFile( path: typeof(AsPathType:type())-- The file to remove ) → () Removes a file. An error will be thrown in the following situations: path does not point to an existing file. The current process lacks permissions to remove the file. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"writeFile​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#writeFile","content":"&lt;/&gt; fs.writeFile( path: typeof(AsPathType:type()),-- The path of the file contents: typeof(ContentsType:type())-- The contents of the file ) → () Writes to a file at path. An error will be thrown in the following situations: The file's parent directory does not exist. The current process lacks permissions to write to the file. Some other I/O error occurred.  ","version":null,"tagName":"h3"},{"title":"writeDir​","type":1,"pageTitle":"fs","url":"/lune-pathfs/api/fs#writeDir","content":"&lt;/&gt; fs.writeDir( path: typeof(AsPathType:type())-- The directory to create ) → () Creates a directory and its parent directories if they are missing. An error will be thrown in the following situations: path already points to an existing file or directory. The current process lacks permissions to create the directory or its missing parents. Some other I/O error occurred. ","version":null,"tagName":"h3"},{"title":"vfs","type":0,"sectionRef":"#","url":"/lune-pathfs/api/vfs","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"vfs","url":"/lune-pathfs/api/vfs#functions","content":" ","version":null,"tagName":"h2"},{"title":"setCurrentDir​","type":1,"pageTitle":"vfs","url":"/lune-pathfs/api/vfs#setCurrentDir","content":"&lt;/&gt; vfs.setCurrentDir(path: AsPath) → () Sets the current directory path virtually. An error will be thrown in the following situations: Given path is not a relative path. ","version":null,"tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/lune-pathfs/docs/intro","content":"Installation Install via pesde pesde add jiwonz/pathfs -t lune ","keywords":"","version":"Next"},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/lune-pathfs/docs/usage","content":"","keywords":"","version":"Next"},{"title":"More Examples​","type":1,"pageTitle":"Basic Usage","url":"/lune-pathfs/docs/usage#more-examples","content":" More example codes can be found in examples folder in the repo ","version":"Next","tagName":"h2"},{"title":"pathfs","type":0,"sectionRef":"#","url":"/lune-pathfs/api/pathfs","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#types","content":" ","version":null,"tagName":"h2"},{"title":"DirEntry​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#DirEntry","content":"&lt;/&gt; interface DirEntry { name: string-- File name of this directory entry without any leading path component(s) file: FilePath?-- File object if it exists dir: DirectoryPath?-- Directory object if it exists path: Path-- The full path of this directory entry } A directory entry object. ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#properties","content":" ","version":null,"tagName":"h2"},{"title":"fs​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#fs","content":"&lt;/&gt; pathfs.fs: fs   ","version":null,"tagName":"h3"},{"title":"DirectoryPath​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#DirectoryPath","content":"&lt;/&gt; pathfs.DirectoryPath: DirectoryPath   ","version":null,"tagName":"h3"},{"title":"FilePath​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#FilePath","content":"&lt;/&gt; pathfs.FilePath: FilePath   ","version":null,"tagName":"h3"},{"title":"pathSeparator​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#pathSeparator","content":"&lt;/&gt; pathfs.pathSeparator: string Current path separator Example if process.os == &quot;windows&quot; then print(pathfs.pathSeparator) -- &quot;\\\\&quot; (Windows) else print(pathfs.pathSeparator) -- &quot;/&quot; (other OS, maybe Linux) end   ","version":null,"tagName":"h3"},{"title":"Component​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#Component","content":"&lt;/&gt; pathfs.Component: Component  A Component class exported from luau-path  ","version":null,"tagName":"h3"},{"title":"Path​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#Path","content":"&lt;/&gt; pathfs.Path: Path A Path class exported from luau-path Example local path = Path.from(&quot;path/to/file&quot;)  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#functions","content":" ","version":null,"tagName":"h2"},{"title":"cwd​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#cwd","content":"&lt;/&gt; pathfs.cwd() → Path-- The current working directory Returns the current working directory as an absolute path.  ","version":null,"tagName":"h3"},{"title":"normalize​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#normalize","content":"&lt;/&gt; pathfs.normalize( path: AsPath-- The path to normalize ) → Path-- The normalized path Normalizes paths similarly to canonicalize, but without performing I/O. This is like Python's os.path.normpath. Original implementation/source credit goes to normalize-path. Normalize a path without performing I/O. All redundant separator and up-level references are collapsed. However, this does not resolve links. Example local path = pathfs.normalize(&quot;./path/to/./file&quot;) -- &quot;path/to/file&quot;   ","version":null,"tagName":"h3"},{"title":"script​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#script","content":"&lt;/&gt; pathfs.script(level: typeof(optionalNumberType:type())) → typeof(PathType:type()) Gets current script context's path. (default level is 2) An error will be thrown in the following situations: script path found in debug.info(level) is not resolvable.  ","version":null,"tagName":"h3"},{"title":"absolute​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#absolute","content":"&lt;/&gt; pathfs.absolute(path: typeof(AsPathType:type())) → typeof(PathType:type()) Gets absolute path of given path just by joining the pathfs.cwd and the path.  ","version":null,"tagName":"h3"},{"title":"withoutCurDir​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#withoutCurDir","content":"&lt;/&gt; pathfs.withoutCurDir(path: typeof(AsPathType:type())) → typeof(PathType:type()) Gets a path without the current directory component.  ","version":null,"tagName":"h3"},{"title":"diff​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#diff","content":"&lt;/&gt; pathfs.diff( target: typeof(AsPathType:type()), base: typeof(AsPathType:type()), separator: typeof(optionalStringType:type()) ) → typeof(optionalPathType:type()) Construct a relative path from a provided base directory path to the provided path. Implementation inspired by https://github.com/Manishearth/pathdiff  ","version":null,"tagName":"h3"},{"title":"canonicalize​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#canonicalize","content":"&lt;/&gt; pathfs.canonicalize(path: typeof(AsPathType:type())) → typeof(PathType:type()) Returns the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved.  ","version":null,"tagName":"h3"},{"title":"fromDir​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#fromDir","content":"&lt;/&gt; pathfs.fromDir( path: typeof(AsPathType:type()), relative: typeof(optionalBooleanType:type()) ) → typeof(PathType:type()) Creates a new Path based on the current dir path. An error will be thrown in the following situations: Errors while calling pathfs.script(3). Current script path's parent path does not exist.  ","version":null,"tagName":"h3"},{"title":"getDir​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#getDir","content":"&lt;/&gt; pathfs.getDir(relative: typeof(optionalBooleanType:type())) → typeof(PathType:type()) Get the dir path based on the current script context. An error will be thrown in the following situations: Errors while calling pathfs.getScriptPath(). Current script path's parent path does not exist.  ","version":null,"tagName":"h3"},{"title":"findFile​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#findFile","content":"&lt;/&gt; pathfs.findFile( filePath: typeof(AsPathType:type())-- The path to the file, of type AsPathType. ) → FilePath?-- A File object if the file exists, otherwise nil. Finds a file at the given file path.  ","version":null,"tagName":"h3"},{"title":"findDir​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#findDir","content":"&lt;/&gt; pathfs.findDir( dirPath: typeof(AsPathType:type())-- The path to the directory, of type AsPathType. ) → DirectoryPath?-- A Directory object if the directory exists, otherwise nil. Finds a directory at the given directory path.  ","version":null,"tagName":"h3"},{"title":"getEntries​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#getEntries","content":"&lt;/&gt; pathfs.getEntries( directory: typeof(directoryType:type())-- The directory to get entries from, of type Directory or AsPathType. ) → {DirEntry}-- A table containing the entries in the directory. Get the entries of a directory. Example for _, entry in pathfs.getEntries(&quot;path/to/dir&quot;) do print(entry.name) -- File name of this directory entry without any leading path component(s) print(entry.file) -- File object if it exists print(entry.directory) -- Directory object if it exists end   ","version":null,"tagName":"h3"},{"title":"getDescendantEntries​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#getDescendantEntries","content":"&lt;/&gt; pathfs.getDescendantEntries( directory: typeof(directoryType:type())-- The directory to get entries from, of type Directory or AsPathType. ) → {DirEntry}-- A table containing the entries in the directory. Get the entries of a directory. Example for _, entry in pathfs.getDescendantEntries(&quot;path/to/dir&quot;) do print(entry.name) -- File name of this directory entry without any leading path component(s) print(entry.file) -- File object if it exists print(entry.directory) -- Directory object if it exists end   ","version":null,"tagName":"h3"},{"title":"watchDirectories​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#watchDirectories","content":"&lt;/&gt; pathfs.watchDirectories( directories: typeof(directoriesArrayType:type()), onChanged: typeof(callbackType:type()) ) → thread Watch directories for changes. Example pathfs.watchDirectories({&quot;path/to/dir1&quot;, &quot;path/to/dir2&quot;}, function() print(&quot;Changed!&quot;) end)   ","version":null,"tagName":"h3"},{"title":"watchFile​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#watchFile","content":"&lt;/&gt; pathfs.watchFile( fileName: typeof(AsPathType:type()), onChanged: typeof(callbackType:type()) ) → thread Watch a file for changes. Example pathfs.watchFile(&quot;path/to/file&quot;, function() print(&quot;Changed!&quot;) end)   ","version":null,"tagName":"h3"},{"title":"writeFileAll​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#writeFileAll","content":"&lt;/&gt; pathfs.writeFileAll( fileOrPath: typeof(FileOrAsPathType:type()),-- The file or path to write to, of type FilePath or AsPathType. contents: typeof(ContentsType:type())-- The contents to write to the file, of type string or table. ) → () Write a file, creating parent directories if they do not exist. Example pathfs.writeFileAll(&quot;path/to/file&quot;, &quot;content&quot;)   ","version":null,"tagName":"h3"},{"title":"serializeFile​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#serializeFile","content":"&lt;/&gt; pathfs.serializeFile( value: any,-- The value to serialize fileOrPath: typeof(FileOrAsPathType:type())-- The file path or FilePath object ) → () Serializes a value to a file based on the file extension. Supports JSON (.json), TOML (.toml), and YAML (.yaml, .yml) formats. Example local data = { name = &quot;example&quot;, value = 42 } pathfs.serializeFile(data, &quot;config.json&quot;) pathfs.serializeFile(data, &quot;config.toml&quot;) pathfs.serializeFile(data, &quot;config.yaml&quot;)   ","version":null,"tagName":"h3"},{"title":"deserializeFile​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#deserializeFile","content":"&lt;/&gt; pathfs.deserializeFile( fileOrPath: typeof(FileOrAsPathType:type())-- The file path or FilePath object ) → any-- The deserialized value Deserializes a file based on the file extension. Supports JSON (.json), TOML (.toml), and YAML (.yaml, .yml) formats. Example local config = pathfs.deserializeFile(&quot;config.json&quot;) local settings = pathfs.deserializeFile(&quot;settings.toml&quot;) local data = pathfs.deserializeFile(&quot;data.yaml&quot;)   ","version":null,"tagName":"h3"},{"title":"watchEntryAdded​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#watchEntryAdded","content":"deprecated in unreleased &lt;/&gt; This was deprecated in unreleased This item is deprecated. Do not use it for new work. pathfs.watchEntryAdded( directory: typeof(directoryType:type()),-- The directory to watch, of type Directory or AsPathType. onAdded: typeof(callbackType:type():: (addedEntry: DirEntry) → ())-- The callback function to call when an entry is added. ) → thread Watch a directory for added entries. Example pathfs.watchEntryAdded(&quot;path/to/dir&quot;, function(addedEntry) print(&quot;Added entry:&quot;, addedEntry.name) end)   ","version":null,"tagName":"h3"},{"title":"watchDescendantEntryAdded​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#watchDescendantEntryAdded","content":"deprecated in unreleased &lt;/&gt; This was deprecated in unreleased This item is deprecated. Do not use it for new work. pathfs.watchDescendantEntryAdded( directory: typeof(directoryType:type()),-- The directory to watch, of type Directory or AsPathType. onAdded: typeof(callbackType:type():: (addedEntry: DirEntry) → ())-- The callback function to call when an entry is added. ) → thread Watch a directory for added descendant entries. Example pathfs.watchDescendantEntryAdded(&quot;path/to/dir&quot;, function(addedEntry) print(&quot;Added entry:&quot;, addedEntry.name) end)   ","version":null,"tagName":"h3"},{"title":"watchEntryRemoved​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#watchEntryRemoved","content":"deprecated in unreleased &lt;/&gt; This was deprecated in unreleased This item is deprecated. Do not use it for new work. pathfs.watchEntryRemoved( directory: typeof(directoryType:type()),-- The directory to watch, of type Directory or AsPathType. onRemoved: typeof(callbackType:type():: (removedEntry: DirEntry) → ())-- The callback function to call when an entry is removed. ) → thread Watch a directory for removed entries. Example pathfs.watchEntryRemoved(&quot;path/to/dir&quot;, function(removedEntry) print(&quot;Removed entry:&quot;, removedEntry.name) end)   ","version":null,"tagName":"h3"},{"title":"watchDescendantEntryRemoved​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#watchDescendantEntryRemoved","content":"deprecated in unreleased &lt;/&gt; This was deprecated in unreleased This item is deprecated. Do not use it for new work. pathfs.watchDescendantEntryRemoved( directory: typeof(directoryType:type()),-- The directory to watch, of type Directory or AsPathType. onRemoved: typeof(callbackType:type():: (removedEntry: DirEntry) → ())-- The callback function to call when an entry is removed. ) → thread Watch a directory for removed descendant entries. Example pathfs.watchDescendantEntryRemoved(&quot;path/to/dir&quot;, function(removedEntry) print(&quot;Removed entry:&quot;, removedEntry.name) end)   ","version":null,"tagName":"h3"},{"title":"observeEntry​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#observeEntry","content":"deprecated in unreleased &lt;/&gt; This was deprecated in unreleased This item is deprecated. Do not use it for new work. pathfs.observeEntry( directory: typeof(directoryType:type()),-- The directory to observe, of type Directory or AsPathType. callback: typeof(callbackType:type():: (entry: DirEntry) → (() → ())?)-- The callback function to call when an entry is added or removed. ) → () → () Observe a directory for changes. Example pathfs.observeEntry(&quot;path/to/dir&quot;, function(entry) print(&quot;Entry changed:&quot;, entry.name) return function() print(&quot;Entry cleanup:&quot;, entry.name) end end)   ","version":null,"tagName":"h3"},{"title":"observeDescendantEntry​","type":1,"pageTitle":"pathfs","url":"/lune-pathfs/api/pathfs#observeDescendantEntry","content":"deprecated in unreleased &lt;/&gt; This was deprecated in unreleased This item is deprecated. Do not use it for new work. pathfs.observeDescendantEntry( directory: typeof(directoryType:type()),-- The directory to observe, of type Directory or AsPathType. callback: typeof(callbackType:type():: (entry: DirEntry) → (() → ())?)-- The callback function to call when an entry is added or removed. ) → () → () Observe a directory for changes in its descendants. Example pathfs.observeDescendantEntry(&quot;path/to/dir&quot;, function(entry) print(&quot;Descendant entry changed:&quot;, entry.name) return function() print(&quot;Cleanup for entry:&quot;, entry.name) end end)  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}