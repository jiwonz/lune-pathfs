"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[372],{120:e=>{e.exports=JSON.parse('{"functions":[{"name":"cwd","desc":"Returns the current working directory as an absolute path.","params":[],"returns":[{"desc":"The current working directory","lua_type":"Path"}],"function_type":"static","source":{"line":64,"path":"src/vfs.luau"}},{"name":"normalize","desc":"Normalizes paths similarly to canonicalize, but without performing I/O.\\n\\nThis is like Python\'s `os.path.normpath`.\\n\\n*Original implementation/source credit goes to [normalize-path](https://docs.rs/normalize-path/0.2.1/src/normalize_path/lib.rs.html#30).*\\n\\nNormalize a path without performing I/O.\\n\\nAll redundant separator and up-level references are collapsed.\\n\\nHowever, this does not resolve links.\\n\\n### Example\\n```lua\\nlocal path = pathfs.normalize(\\"./path/to/./file\\") -- \\"path/to/file\\"\\n```","params":[{"name":"path","desc":"The path to normalize","lua_type":"AsPath"}],"returns":[{"desc":"The normalized path","lua_type":"Path"}],"function_type":"static","source":{"line":74,"path":"src/normalizePath.luau"}},{"name":"script","desc":"Gets current script context\'s path. (default level is `2`)\\n\\nAn error will be thrown in the following situations:\\n\\n* script path found in `debug.info(level)` is not resolvable.","params":[{"name":"level","desc":"","lua_type":"typeof(optionalNumberType:type())"}],"returns":[{"desc":"","lua_type":"typeof(PathType:type())\\n"}],"function_type":"static","source":{"line":117,"path":"src/lib.luau"}},{"name":"absolute","desc":"Gets absolute path of given path just by joining the `pathfs.cwd` and the path.","params":[{"name":"path","desc":"","lua_type":"typeof(AsPathType:type())"}],"returns":[{"desc":"","lua_type":"typeof(PathType:type())\\n"}],"function_type":"static","source":{"line":142,"path":"src/lib.luau"}},{"name":"withoutCurDir","desc":"Gets a path without the current directory component.","params":[{"name":"path","desc":"","lua_type":"typeof(AsPathType:type())"}],"returns":[{"desc":"","lua_type":"typeof(PathType:type())\\n"}],"function_type":"static","source":{"line":160,"path":"src/lib.luau"}},{"name":"diff","desc":"Construct a relative path from a provided base directory path to the provided path.\\n\\nImplementation inspired by https://github.com/Manishearth/pathdiff","params":[{"name":"target","desc":"","lua_type":"typeof(AsPathType:type())"},{"name":"base","desc":"","lua_type":"typeof(AsPathType:type())"},{"name":"separator","desc":"","lua_type":"typeof(optionalStringType:type())\\n"}],"returns":[{"desc":"","lua_type":"typeof(optionalPathType:type())\\n"}],"function_type":"static","source":{"line":183,"path":"src/lib.luau"}},{"name":"canonicalize","desc":"Returns the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved.","params":[{"name":"path","desc":"","lua_type":"typeof(AsPathType:type())"}],"returns":[{"desc":"","lua_type":"typeof(PathType:type())\\n"}],"function_type":"static","source":{"line":246,"path":"src/lib.luau"}},{"name":"fromDir","desc":"Creates a new `Path` based on the current dir path.\\n\\nAn error will be thrown in the following situations:\\n\\n* Errors while calling `pathfs.script(3)`.\\n* Current script path\'s parent path does not exist.","params":[{"name":"path","desc":"","lua_type":"typeof(AsPathType:type())"},{"name":"relative","desc":"","lua_type":"typeof(optionalBooleanType:type())\\n"}],"returns":[{"desc":"","lua_type":"typeof(PathType:type())\\n"}],"function_type":"static","source":{"line":269,"path":"src/lib.luau"}},{"name":"getDir","desc":"Get the dir path based on the current script context.\\n\\nAn error will be thrown in the following situations:\\n\\n* Errors while calling `pathfs.getScriptPath()`.\\n* Current script path\'s parent path does not exist.","params":[{"name":"relative","desc":"","lua_type":"typeof(optionalBooleanType:type())"}],"returns":[{"desc":"","lua_type":"typeof(PathType:type())\\n"}],"function_type":"static","source":{"line":297,"path":"src/lib.luau"}},{"name":"findFile","desc":"Finds a file at the given file path.","params":[{"name":"filePath","desc":"The path to the file, of type AsPathType.","lua_type":"typeof(AsPathType:type())"}],"returns":[{"desc":"A File object if the file exists, otherwise nil.","lua_type":"FilePath?"}],"function_type":"static","source":{"line":316,"path":"src/lib.luau"}},{"name":"findDir","desc":"Finds a directory at the given directory path.","params":[{"name":"dirPath","desc":"The path to the directory, of type AsPathType.","lua_type":"typeof(AsPathType:type())"}],"returns":[{"desc":"A Directory object if the directory exists, otherwise nil.","lua_type":"DirectoryPath?"}],"function_type":"static","source":{"line":335,"path":"src/lib.luau"}},{"name":"getEntries","desc":"Get the entries of a directory.\\n\\n### Example\\n```lua\\nfor _, entry in pathfs.getEntries(\\"path/to/dir\\") do\\n\\tprint(entry.name) -- File name of this directory entry without any leading path component(s)\\n\\tprint(entry.file) -- File object if it exists\\n\\tprint(entry.directory) -- Directory object if it exists\\nend\\n```","params":[{"name":"directory","desc":"The directory to get entries from, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"}],"returns":[{"desc":"A table containing the entries in the directory.","lua_type":"{ DirEntry }"}],"function_type":"static","source":{"line":399,"path":"src/lib.luau"}},{"name":"getDescendantEntries","desc":"Get the entries of a directory.\\n\\n### Example\\n```lua\\nfor _, entry in pathfs.getDescendantEntries(\\"path/to/dir\\") do\\n\\tprint(entry.name) -- File name of this directory entry without any leading path component(s)\\n\\tprint(entry.file) -- File object if it exists\\n\\tprint(entry.directory) -- Directory object if it exists\\nend\\n```","params":[{"name":"directory","desc":"The directory to get entries from, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"}],"returns":[{"desc":"A table containing the entries in the directory.","lua_type":"{ DirEntry }"}],"function_type":"static","source":{"line":436,"path":"src/lib.luau"}},{"name":"watchDirectories","desc":"Watch directories for changes.\\n\\n### Example\\n```lua\\npathfs.watchDirectories({\\"path/to/dir1\\", \\"path/to/dir2\\"}, function()\\n\\tprint(\\"Changed!\\")\\nend)\\n```","params":[{"name":"directories","desc":"","lua_type":"typeof(directoriesArrayType:type())"},{"name":"onChanged","desc":"","lua_type":"typeof(callbackType:type())\\n"}],"returns":[{"desc":"","lua_type":"thread\\n"}],"function_type":"static","source":{"line":507,"path":"src/lib.luau"}},{"name":"watchFile","desc":"Watch a file for changes.\\n\\n### Example\\n```lua\\npathfs.watchFile(\\"path/to/file\\", function()\\n\\tprint(\\"Changed!\\")\\nend)\\n```","params":[{"name":"fileName","desc":"","lua_type":"typeof(AsPathType:type())"},{"name":"onChanged","desc":"","lua_type":"typeof(callbackType:type())"}],"returns":[{"desc":"","lua_type":"thread\\n"}],"function_type":"static","source":{"line":540,"path":"src/lib.luau"}},{"name":"watchEntryAdded","desc":"Watch a directory for added entries.\\n\\n### Example\\n```lua\\npathfs.watchEntryAdded(\\"path/to/dir\\", function(addedEntry)\\n\\tprint(\\"Added entry:\\", addedEntry.name)\\nend)\\n```","params":[{"name":"directory","desc":"The directory to watch, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"},{"name":"onAdded","desc":"The callback function to call when an entry is added.","lua_type":"typeof(callbackType:type() :: (addedEntry: DirEntry) -> ())\\n"}],"returns":[{"desc":"","lua_type":"thread\\n"}],"function_type":"static","deprecated":{"version":"v0.6.0","desc":null},"source":{"line":615,"path":"src/lib.luau"}},{"name":"watchDescendantEntryAdded","desc":"Watch a directory for added descendant entries.\\n\\n### Example\\n```lua\\npathfs.watchDescendantEntryAdded(\\"path/to/dir\\", function(addedEntry)\\n\\tprint(\\"Added entry:\\", addedEntry.name)\\nend)\\n```","params":[{"name":"directory","desc":"The directory to watch, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"},{"name":"onAdded","desc":"The callback function to call when an entry is added.","lua_type":"typeof(callbackType:type() :: (addedEntry: DirEntry) -> ())\\n"}],"returns":[{"desc":"","lua_type":"thread\\n"}],"function_type":"static","deprecated":{"version":"v0.6.0","desc":null},"source":{"line":641,"path":"src/lib.luau"}},{"name":"watchEntryRemoved","desc":"Watch a directory for removed entries.\\n\\n### Example\\n```lua\\npathfs.watchEntryRemoved(\\"path/to/dir\\", function(removedEntry)\\n\\tprint(\\"Removed entry:\\", removedEntry.name)\\nend)\\n```","params":[{"name":"directory","desc":"The directory to watch, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"},{"name":"onRemoved","desc":"The callback function to call when an entry is removed.","lua_type":"typeof(callbackType:type() :: (removedEntry: DirEntry) -> ())\\n"}],"returns":[{"desc":"","lua_type":"thread\\n"}],"function_type":"static","deprecated":{"version":"v0.6.0","desc":null},"source":{"line":705,"path":"src/lib.luau"}},{"name":"watchDescendantEntryRemoved","desc":"Watch a directory for removed descendant entries.\\n\\n### Example\\n```lua\\npathfs.watchDescendantEntryRemoved(\\"path/to/dir\\", function(removedEntry)\\n\\tprint(\\"Removed entry:\\", removedEntry.name)\\nend)\\n```","params":[{"name":"directory","desc":"The directory to watch, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"},{"name":"onRemoved","desc":"The callback function to call when an entry is removed.","lua_type":"typeof(callbackType:type() :: (removedEntry: DirEntry) -> ())\\n"}],"returns":[{"desc":"","lua_type":"thread\\n"}],"function_type":"static","deprecated":{"version":"v0.6.0","desc":null},"source":{"line":731,"path":"src/lib.luau"}},{"name":"writeFileAll","desc":"Write a file, creating parent directories if they do not exist.\\n\\n### Example\\n```lua\\npathfs.writeFileAll(\\"path/to/file\\", \\"content\\")\\n```","params":[{"name":"fileOrPath","desc":"The file or path to write to, of type FilePath or AsPathType.","lua_type":"typeof(FileOrAsPathType:type())"},{"name":"contents","desc":"The contents to write to the file, of type string or table.","lua_type":"typeof(ContentsType:type())"}],"returns":[],"function_type":"static","source":{"line":760,"path":"src/lib.luau"}},{"name":"observeEntry","desc":"Observe a directory for changes.\\n\\n### Example\\n```lua\\npathfs.observeEntry(\\"path/to/dir\\", function(entry)\\n\\tprint(\\"Entry changed:\\", entry.name)\\n\\n\\treturn function()\\n\\t\\tprint(\\"Entry cleanup:\\", entry.name)\\n\\tend\\nend)\\n```","params":[{"name":"directory","desc":"The directory to observe, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"},{"name":"callback","desc":"The callback function to call when an entry is added or removed.","lua_type":"typeof(callbackType:type() :: (entry: DirEntry) -> (() -> ())?)\\n"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"static","deprecated":{"version":"v0.6.0","desc":null},"source":{"line":906,"path":"src/lib.luau"}},{"name":"observeDescendantEntry","desc":"Observe a directory for changes in its descendants.\\n\\n### Example\\n```lua\\npathfs.observeDescendantEntry(\\"path/to/dir\\", function(entry)\\n\\tprint(\\"Descendant entry changed:\\", entry.name)\\n\\n\\treturn function()\\n\\t\\tprint(\\"Cleanup for entry:\\", entry.name)\\n\\tend\\nend)\\n```","params":[{"name":"directory","desc":"The directory to observe, of type Directory or AsPathType.","lua_type":"typeof(directoryType:type())"},{"name":"callback","desc":"The callback function to call when an entry is added or removed.","lua_type":"typeof(callbackType:type() :: (entry: DirEntry) -> (() -> ())?)\\n"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"static","deprecated":{"version":"v0.6.0","desc":null},"source":{"line":936,"path":"src/lib.luau"}},{"name":"serializeFile","desc":"Serializes a value to a file based on the file extension.\\nSupports JSON (.json), TOML (.toml), and YAML (.yaml, .yml) formats.\\n\\n### Example\\n```lua\\nlocal data = { name = \\"example\\", value = 42 }\\npathfs.serializeFile(data, \\"config.json\\")\\npathfs.serializeFile(data, \\"config.toml\\")\\npathfs.serializeFile(data, \\"config.yaml\\")\\n```","params":[{"name":"value","desc":"The value to serialize","lua_type":"any"},{"name":"fileOrPath","desc":"The file path or FilePath object","lua_type":"typeof(FileOrAsPathType:type())"}],"returns":[],"function_type":"static","source":{"line":963,"path":"src/lib.luau"}},{"name":"deserializeFile","desc":"Deserializes a file based on the file extension.\\nSupports JSON (.json), TOML (.toml), and YAML (.yaml, .yml) formats.\\n\\n### Example\\n```lua\\nlocal config = pathfs.deserializeFile(\\"config.json\\")\\nlocal settings = pathfs.deserializeFile(\\"settings.toml\\")\\nlocal data = pathfs.deserializeFile(\\"data.yaml\\")\\n```","params":[{"name":"fileOrPath","desc":"The file path or FilePath object","lua_type":"typeof(FileOrAsPathType:type())"}],"returns":[{"desc":"The deserialized value","lua_type":"any"}],"function_type":"static","source":{"line":999,"path":"src/lib.luau"}}],"properties":[{"name":"fs","desc":"","lua_type":"fs","source":{"line":45,"path":"src/lib.luau"}},{"name":"DirectoryPath","desc":"","lua_type":"DirectoryPath","source":{"line":50,"path":"src/lib.luau"}},{"name":"FilePath","desc":"","lua_type":"FilePath","source":{"line":55,"path":"src/lib.luau"}},{"name":"pathSeparator","desc":"Current path separator\\n\\n### Example\\n```lua\\nif process.os == \\"windows\\" then\\n\\tprint(pathfs.pathSeparator) -- \\"\\\\\\\\\\" (Windows)\\nelse\\n\\tprint(pathfs.pathSeparator) -- \\"/\\" (other OS, maybe Linux)\\nend\\n```","lua_type":"string","source":{"line":71,"path":"src/lib.luau"}},{"name":"Component","desc":"A `Component` class exported from `luau-path`","lua_type":"Component","external_types":[{"name":"Component","url":"https://github.com/seaofvoices/luau-path/blob/main/src/Component.luau"}],"source":{"line":79,"path":"src/lib.luau"}},{"name":"Path","desc":"A `Path` class exported from `luau-path`\\n\\n### Example\\n```lua\\nlocal path = Path.from(\\"path/to/file\\")\\n```","lua_type":"Path","source":{"line":99,"path":"src/lib.luau"}}],"types":[{"name":"DirEntry","desc":"A directory entry object.","fields":[{"name":"name","lua_type":"string","desc":"File name of this directory entry without any leading path component(s)"},{"name":"file","lua_type":"FilePath?","desc":"File object if it exists"},{"name":"dir","lua_type":"DirectoryPath?","desc":"Directory object if it exists"},{"name":"path","lua_type":"Path","desc":"The full path of this directory entry"}],"source":{"line":359,"path":"src/lib.luau"}}],"name":"pathfs","desc":"luau-path + @lune/fs with some utilities","source":{"line":40,"path":"src/lib.luau"}}')}}]);